/* Compositions */
/*
CLUSTER
More info: https://every-layout.dev/layouts/cluster/
A layout that lets you distribute items with consitent
spacing, regardless of their size

CUSTOM PROPERTIES AND CONFIGURATION
--gutter ($global-gutter): This defines the space
between each item.

--cluster-horizontal-alignment (flex-start) How items should align
horizontally. Can be any acceptable flexbox aligmnent value.

--cluster-vertical-alignment How items should align vertically.
Can be any acceptable flexbox alignment value.
*/
.cluster {
  display: flex;
  flex-wrap: wrap;
  gap: var(--gutter, var(--space-size-1));
  justify-content: var(--cluster-horizontal-alignment, flex-start);
  align-items: var(--cluster-vertical-alignment, center);
}
/* 
  SIDEBAR
  More info: https://every-layout.dev/layouts/sidebar/
  A layout that allows you to have a flexible main content area
  and a "fixed" width sidebar that sits on the left or right.
  If there is not enough viewport space to fit both the sidebar
  width *and* the main content minimum width, they will stack
  on top of each other
  
  CUSTOM PROPERTIES AND CONFIGURATION
  --gutter (var(--space-size-1)): This defines the space
  between the sidebar and main content.
  
  --sidebar-target-width (20rem): How large the sidebar should be
  
  --sidebar-content-min-width(50%): The minimum size of the main content area
  
  EXCEPTIONS
  .sidebar[data-direction='rtl']: flips the sidebar to be on the right 
  */
.sidebar {
  display: flex;
  flex-wrap: wrap;
  gap: var(--gutter, var(--space-size-1));
}
.sidebar:not([data-direction]) > :first-child {
  flex-basis: var(--sidebar-target-width, 20rem);
  flex-grow: 1;
}
.sidebar:not([data-direction]) > :last-child {
  flex-basis: 0;
  flex-grow: 999;
  min-width: var(--sidebar-content-min-width, 50%);
}
/* 
  A flipped version where the sidebar is on the right
  */
/*
  SWITCHER
  More info: https://every-layout.dev/layouts/switcher/
  A layout that allows you to lay **2** items next to each other
  until there is not enough horizontal space to allow that.
  
  CUSTOM PROPERTIES AND CONFIGURATION
  --gutter (var(--space-size-1)): This defines the space
  between each item
  
  --switcher-target-container-width (40rem): How large the container
  needs to be to allow items to sit inline with each other
  
  --switcher-vertical-alignment How items should align vertically.
  Can be any acceptable flexbox alignment value.
  */
.switcher {
  display: flex;
  flex-wrap: wrap;
  gap: var(--gutter, var(--space-size-1));
  align-items: var(--switcher-vertical-alignment, flex-start);
}
.switcher > * {
  flex-grow: 1;
  flex-basis: calc(
    (var(--switcher-target-container-width, 40rem) - 100%) * 999
  );
}
/* Max 2 items,
  so we target everything *after* those */
/* Blocks */
.box {
  padding: var(--space-size-1);
  background: var(--color-secondary);
}
/* Utilities */
/* 
  FLOW UTILITY
  Info: https://piccalil.li/quick-tip/flow-utility/ 
  */
.flow > * + * {
  margin-top: var(--flow-space, var(--space-size-1));
}
/* 
  REGION UTILITY
  Consistent block padding for page sections
  */
/* 
  VISUALLY HIDDEN UTILITY
  Info: https://piccalil.li/quick-tip/visually-hidden/ 
  */
/*
  WRAPPER UTILITY
  A common wrapper/container
  */
.wrapper {
  margin-inline: auto;
  width: clamp(16rem, 95vw, 85rem);
  padding-inline: var(--space-size-1);
  position: relative;
}
/* Tailwind utilities */
.text-base {
  font-size: clamp(1rem, 1rem + 0vw, 1rem);
}
.text-size-1 {
  font-size: clamp(1.2rem, 1.08rem + 0.59vw, 1.5rem);
}
.text-size-2 {
  font-size: clamp(1.44rem, 1.12rem + 1.58vw, 2.25rem);
}
.text-size-3 {
  font-size: clamp(1.73rem, 1.09rem + 3.21vw, 3.38rem);
}
.text-size-4 {
  font-size: clamp(2.07rem, 0.91rem + 5.83vw, 5.06rem);
}
.text-size-5 {
  font-size: clamp(2.49rem, 0.5rem + 9.96vw, 7.59rem);
}
/* VARIABLES GENERATED WITH TAILWIND CONFIG ON 27/01/2022.
      Tokens location: ./tailwind.config.js */

:root {
  --color-primary: #ff5400;
  --color-secondary: #86c7f0;
  --color-light: #f3f3f3;
  --color-dark: #252525;
  --space-size-0: clamp(0.83rem, 0.9rem + -0.32vw, 0.67rem);
  --space-base: clamp(1rem, 1rem + 0vw, 1rem);
  --space-size-1: clamp(1.2rem, 1.08rem + 0.59vw, 1.5rem);
  --space-size-2: clamp(1.44rem, 1.12rem + 1.58vw, 2.25rem);
  --space-size-3: clamp(1.73rem, 1.09rem + 3.21vw, 3.38rem);
  --space-size-4: clamp(2.07rem, 0.91rem + 5.83vw, 5.06rem);
  --space-size-5: clamp(2.49rem, 0.5rem + 9.96vw, 7.59rem);
  --size-size-0: clamp(0.83rem, 0.9rem + -0.32vw, 0.67rem);
  --size-base: clamp(1rem, 1rem + 0vw, 1rem);
  --size-size-1: clamp(1.2rem, 1.08rem + 0.59vw, 1.5rem);
  --size-size-2: clamp(1.44rem, 1.12rem + 1.58vw, 2.25rem);
  --size-size-3: clamp(1.73rem, 1.09rem + 3.21vw, 3.38rem);
  --size-size-4: clamp(2.07rem, 0.91rem + 5.83vw, 5.06rem);
  --size-size-5: clamp(2.49rem, 0.5rem + 9.96vw, 7.59rem);
}

/* Modern reset: https://piccalil.li/blog/a-modern-css-reset/ */

/* Box sizing rules */

*,
*::before,
*::after {
  box-sizing: border-box;
}

/* Remove default margin */

body,
h1,
h2,
h3,
p {
  margin: 0;
}

/* Remove list styles on ul, ol elements with a list role, which suggests default styling will be removed */

/* Set core root defaults */

html:focus-within {
  scroll-behavior: smooth;
}

/* Set core body defaults */

body {
  min-height: 100vh;
  text-rendering: optimizeSpeed;
  line-height: 1.5;
}

/* A elements that don't have a class get default styles */

a:not([class]) {
  text-decoration-skip-ink: auto;
}

/* Make images easier to work with */

/* Inherit fonts for inputs and buttons */

/* Remove all animations, transitions and smooth scroll for people that prefer not to see them */

@media (prefers-reduced-motion: reduce) {
  html:focus-within {
    scroll-behavior: auto;
  }

  *,
  *::before,
  *::after {
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: 0.01ms !important;
    scroll-behavior: auto !important;
  }
}

/* Global styles */

body {
  padding: var(--space-size-2) var(--space-size-1);
  --tw-bg-opacity: 1;
  background-color: rgb(243 243 243 / var(--tw-bg-opacity));
  font-family: "Inter", "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
  font-size: clamp(1.2rem, 1.08rem + 0.59vw, 1.5rem);
  --tw-text-opacity: 1;
  color: rgb(37 37 37 / var(--tw-text-opacity));
}

h1,
h2,
h3 {
  line-height: 1.1;
  font-weight: 900;
}

h1 {
  font-size: clamp(2.07rem, 0.91rem + 5.83vw, 5.06rem);
}

h2 {
  font-size: clamp(1.73rem, 1.09rem + 3.21vw, 3.38rem);
}

h3 {
  font-size: clamp(1.44rem, 1.12rem + 1.58vw, 2.25rem);
}

p,
li {
  max-width: 70ch;
}

h1 {
  max-width: 15ch;
}

h2,
h3 {
  max-width: 30ch;
}

a {
  color: currentcolor;
  text-decoration-color: var(--color-primary);
}

a:hover {
  text-decoration: none;
}

/* Prose */

h2,
h3 {
  --flow-space: var(--space-size-3);
}

h2 + *,
h3 + * {
  --flow-space: var(--space-base);
}

/* So text scale renders nicely */

div[class*="text-"] {
  --flow-space: 1rem;
  line-height: 1;
  font-weight: 700;
}
